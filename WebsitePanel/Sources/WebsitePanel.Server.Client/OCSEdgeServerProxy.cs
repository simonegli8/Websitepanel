//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:2.0.50727.8669
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Dieser Quellcode wurde automatisch generiert von wsdl, Version=2.0.50727.42.
// 
using System.Collections.Generic;
using WebsitePanel.Providers;
using WebsitePanel.Providers.Common;
using WebsitePanel.Providers.Database;
using WebsitePanel.EnterpriseServer.Base.RDS;
using WebsitePanel.Providers.DNS;
using WebsitePanel.Providers.DomainLookup;
using WebsitePanel.Providers.EnterpriseStorage;
using WebsitePanel.Providers.FTP;
using WebsitePanel.Providers.HeliconZoo;
using WebsitePanel.Providers.HostedSolution;
using WebsitePanel.Providers.Mail;
using WebsitePanel.Providers.OS;
using WebsitePanel.Providers.RemoteDesktopServices;
using WebsitePanel.Providers.ResultObjects;
using WebsitePanel.Providers.SharePoint;
using WebsitePanel.Providers.Statistics;
using WebsitePanel.Providers.StorageSpaces;
using WebsitePanel.Providers.Virtualization;
using WebsitePanel.Providers.Web;
using WebsitePanel.Providers.WebAppGallery;

namespace WebsitePanel.Providers.OCS {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OCSEdgeServerSoap", Namespace="http://smbsaas/websitepanel/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecureSoapHeader))]
    public partial class OCSEdgeServer : WebsitePanel.Server.Client.ServiceProxy {
        
        public AuthenticationSoapHeader AuthenticationSoapHeaderValue;
        
        public EncryptionSession EncryptionSessionValue;
        
        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;
        
        private System.Threading.SendOrPostCallback AddDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDomainOperationCompleted;
        
        /// <remarks/>
        public OCSEdgeServer() {
            this.Url = "http://localhost:9003/OCSEdgeServer.asmx";
        }
        
        /// <remarks/>
        public event AddDomainCompletedEventHandler AddDomainCompleted;
        
        /// <remarks/>
        public event DeleteDomainCompletedEventHandler DeleteDomainCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("EncryptionSessionValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/AddDomain", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDomain(string domainName) {
            this.Invoke("AddDomain", new object[] {
                        domainName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomain(string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDomain", new object[] {
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddDomain(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddDomainAsync(string domainName) {
            this.AddDomainAsync(domainName, null);
        }
        
        /// <remarks/>
        public void AddDomainAsync(string domainName, object userState) {
            if ((this.AddDomainOperationCompleted == null)) {
                this.AddDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainOperationCompleted);
            }
            this.InvokeAsync("AddDomain", new object[] {
                        domainName}, this.AddDomainOperationCompleted, userState);
        }
        
        private void OnAddDomainOperationCompleted(object arg) {
            if ((this.AddDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("EncryptionSessionValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/DeleteDomain", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDomain(string domainName) {
            this.Invoke("DeleteDomain", new object[] {
                        domainName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomain(string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomain", new object[] {
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteDomain(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteDomainAsync(string domainName) {
            this.DeleteDomainAsync(domainName, null);
        }
        
        /// <remarks/>
        public void DeleteDomainAsync(string domainName, object userState) {
            if ((this.DeleteDomainOperationCompleted == null)) {
                this.DeleteDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteDomain", new object[] {
                        domainName}, this.DeleteDomainOperationCompleted, userState);
        }
        
        private void OnDeleteDomainOperationCompleted(object arg) {
            if ((this.DeleteDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}


#if Net

namespace WebsitePanel.Providers.OCS.WSE {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="OCSEdgeServerSoap", Namespace="http://smbsaas/websitepanel/server/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SecureSoapHeader))]
    public partial class OCSEdgeServer : WebsitePanel.Server.Client.WSE3ServiceProxy {
        
        public AuthenticationSoapHeader AuthenticationSoapHeaderValue;
        
        public EncryptionSession EncryptionSessionValue;
        
        public ServiceProviderSettingsSoapHeader ServiceProviderSettingsSoapHeaderValue;
        
        private System.Threading.SendOrPostCallback AddDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDomainOperationCompleted;
        
        /// <remarks/>
        public OCSEdgeServer() {
            this.Url = "http://localhost:9003/OCSEdgeServer.asmx";
        }
        
        /// <remarks/>
        public event AddDomainCompletedEventHandler AddDomainCompleted;
        
        /// <remarks/>
        public event DeleteDomainCompletedEventHandler DeleteDomainCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("EncryptionSessionValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/AddDomain", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDomain(string domainName) {
            this.Invoke("AddDomain", new object[] {
                        domainName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDomain(string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDomain", new object[] {
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddDomain(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddDomainAsync(string domainName) {
            this.AddDomainAsync(domainName, null);
        }
        
        /// <remarks/>
        public void AddDomainAsync(string domainName, object userState) {
            if ((this.AddDomainOperationCompleted == null)) {
                this.AddDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDomainOperationCompleted);
            }
            this.InvokeAsync("AddDomain", new object[] {
                        domainName}, this.AddDomainOperationCompleted, userState);
        }
        
        private void OnAddDomainOperationCompleted(object arg) {
            if ((this.AddDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceProviderSettingsSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("EncryptionSessionValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticationSoapHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/server/DeleteDomain", RequestNamespace="http://smbsaas/websitepanel/server/", ResponseNamespace="http://smbsaas/websitepanel/server/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDomain(string domainName) {
            this.Invoke("DeleteDomain", new object[] {
                        domainName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDomain(string domainName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDomain", new object[] {
                        domainName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteDomain(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteDomainAsync(string domainName) {
            this.DeleteDomainAsync(domainName, null);
        }
        
        /// <remarks/>
        public void DeleteDomainAsync(string domainName, object userState) {
            if ((this.DeleteDomainOperationCompleted == null)) {
                this.DeleteDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteDomain", new object[] {
                        domainName}, this.DeleteDomainOperationCompleted, userState);
        }
        
        private void OnDeleteDomainOperationCompleted(object arg) {
            if ((this.DeleteDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDomainCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteDomainCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}


#endif